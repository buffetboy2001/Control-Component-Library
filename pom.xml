<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<artifactId>jlcl</artifactId>
	<version>1.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<parent>
	   <groupId>org.mitre.caasd</groupId>
	   <artifactId>caasd-project</artifactId>
	   <version>0.2.10</version>
	</parent>

	<name>Java Linear Control Library</name>
	<url></url>

	<organization>
		<name>The MITRE Corporation</name>
		<url>http://www.mitre.org</url>
	</organization>

	<properties>
		<project.name>Java Linear Control Library</project.name>
		<project.contact.1>Stuart Bowman(Project Lead)</project.contact.1>
		<project.contact.2></project.contact.2>
		<project.copyright>copyright=(c) 2013 The MITRE Corporation.</project.copyright>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- default ams properties -->
		<project.group.id>org.mitre.caasd.jlcl</project.group.id>
		<project.organization.department>CAASD-F081</project.organization.department>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.copyright>(c) 2013 The MITRE Corporation. ALL RIGHTS RESERVED</project.copyright>
<!-- 	<native.lib.path.rel>lib${file.separator}${sun.arch.data.model}bit</native.lib.path.rel>
		<native.lib.path.abs>${basedir}${file.separator}${native.lib.path.rel}</native.lib.path.abs>
		<native.lib.arg.string>-Djava.library.path="${native.lib.path.abs}"</native.lib.arg.string> -->
		<java.compile.compliance.level>1.6</java.compile.compliance.level>

		<!-- maven plugin versions -->
		<resources-plugin.version>2.5</resources-plugin.version>
		<compiler-plugin.version>2.3.2</compiler-plugin.version>
		<exec-plugin.version>1.2.1</exec-plugin.version>
		<surefire-plugin.version>2.12</surefire-plugin.version>
		<install-plugin.version>2.3.1</install-plugin.version>
		<jar-plugin.version>2.3.2</jar-plugin.version>
		<javadoc-plugin-version>2.8.1</javadoc-plugin-version>
		<pmd-plugin-version>2.6</pmd-plugin-version>
		<source-plugin-version>2.1.2</source-plugin-version>
		<scm-plugin-version>1.5</scm-plugin-version>
		<buildnumber-plugin-version>1.0</buildnumber-plugin-version>
		<m2e-lifecycle-mapping-version>1.0.0</m2e-lifecycle-mapping-version>
		<release-plugin-version>2.2.2</release-plugin-version>
		<cobertura-plugin-version>2.5</cobertura-plugin-version>
		<project-info-reports-plugin-version>2.4</project-info-reports-plugin-version>
		<jxr-plugin-version>2.3</jxr-plugin-version>
		<findbugs-plugin-version>2.3.3</findbugs-plugin-version>
		<build-helper-plugin-version>1.5</build-helper-plugin-version>
		<jdepend-plugin-version>2.0-beta-2</jdepend-plugin-version>
		<versions-plugin-version>1.3.1</versions-plugin-version>
		<el4jgraph-plugin-version>1.1</el4jgraph-plugin-version>

		<!-- reporting locations -->
		<reports.findbugs.outputdir>${project.reporting.outputDirectory}${file.separator}findbugs</reports.findbugs.outputdir>
		<reports.javadocs.outputdir>${project.reporting.outputDirectory}${file.separator}javadocs</reports.javadocs.outputdir>
		<reports.pmd.outputdir>${project.reporting.outputDirectory}${file.separator}pmd</reports.pmd.outputdir>
		<reports.cobertura.outputdir>${project.reporting.outputDirectory}${file.separator}cobertura</reports.cobertura.outputdir>
		<reports.checkstyle.outputdir>${project.reporting.outputDirectory}${file.separator}checkstyle</reports.checkstyle.outputdir>

	</properties>

	<dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <scope>test</scope>
        </dependency>
	</dependencies>

	<dependencyManagement>
	</dependencyManagement>

	<!-- define which repos to use to find our dependency artifacts -->
	<repositories>
		<!-- local external releases and snapshots -->
		<repository>
			<name>Local External Artifacts - releases</name>
			<id>external-releases</id>
			<url>http://dali.mitre.org/nexus/content/repositories/external-releases</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<name>Local External Artifacts - snapshots</name>
			<id>external-snapshots</id>
			<url>http://dali.mitre.org/nexus/content/repositories/external-snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
		</repository>

		<!-- MITRE releases and snapshots -->
		<repository>
			<name>MITRE CAASD - releases</name>
			<id>mitre-caasd-releases</id>
			<url>http://dali.mitre.org/nexus/content/repositories/mitre-caasd-releases</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<name>MITRE CAASD - snapshots</name>
			<id>mitre-caasd-snapshots</id>
			<url>http://dali.mitre.org/nexus/content/repositories/mitre-caasd-snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>

		<!-- Proxied public repos -->
		<!-- [maven central is defined in super POM and mirrored to our CAASD central 
			proxy in settings.xml so we don't need to re-declare it here] -->
		<repository>
			<name>CAASD Proxy of Java.net at http://download.java.net/maven/2</name>
			<id>java.net-m2-releases</id>
			<url>http://dali.mitre.org/nexus/content/repositories/java.net-m2-releases</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<name>CAASD Proxy of Codehaus releases at http://repository.codehaus.org/</name>
			<id>codehaus</id>
			<url>http://dali.mitre.org/nexus/content/repositories/codehaus</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<name>Atlassian/</name>
			<id>atlassian</id>
			<url>http://dali.mitre.org/nexus/content/repositories/atlassian/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<name>Apache public releases/</name>
			<id>adlassian</id>
			<url>http://dali.mitre.org/nexus/content/repositories/apache-public-releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<distributionManagement>
        <repository>
            <name>MITRE CAASD - releases</name>
            <id>mitre-caasd-releases</id><!-- this is the id that must match the repository
                id in your settings.xml to correctly pull crendentials -->
            <url>http://dali.mitre.org/nexus/content/repositories/mitre-caasd-releases</url>
        </repository>
        <snapshotRepository>
            <name>MITRE CAASD - snapshots</name>
            <id>mitre-caasd-snapshots</id>
            <url>http://dali.mitre.org/nexus/content/repositories/mitre-caasd-snapshots</url>
        </snapshotRepository>
	</distributionManagement>

	<!-- configure our maven build -->
	<build>

		<plugins>

			<!-- super POM defines some default plugins. we add additional plugins 
				and edit any default configurations here -->

			<!-- handles copying project resources to output directory [/src/main/resources->/target/classes 
				and /src/test/resources->/target/test-classes] -->
 			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${resources-plugin.version}</version>
			</plugin>

			<!-- handles compiling the source. here we specify java compiler compliance -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler-plugin.version}</version>
				<configuration>
					<source>${java.compile.compliance.level}</source>
					<target>${java.compile.compliance.level}</target>
					<verbose>true</verbose>
				</configuration>
			</plugin>

			<!-- create and attach a source jar to our deployment package -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${source-plugin-version}</version>
				<executions>
					<execution>
						<phase>verify</phase>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- configure our archiver (jar) configuration (e.g., define MANIFEST entries) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>${jar-plugin.version}</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addClasspath>true</addClasspath>
							<classpathLayoutType>custom</classpathLayoutType>
							<customClasspathLayout>$${artifact.artifactId}-$${artifact.version}.$${artifact.extension}</customClasspathLayout>
						</manifest>
						<manifestSection>
							<name>Contacts</name>
							<manifestEntries>
								<Contact1>${project.contact.1}</Contact1>
								<Contact2>${project.contact.2}</Contact2>
							</manifestEntries>
						</manifestSection>
						<manifestSection>
							<name>Build-Details</name>
							<manifestEntries>
								<Built-By>${user.name}</Built-By>
								<Build-Time>${maven.build.timestamp}</Build-Time>
								<Build-Machine>${env.COMPUTERNAME}</Build-Machine>
								<JDK-Version>${java.version}</JDK-Version>
								<Compiler-Compliance>${java.compile.compliance.level}</Compiler-Compliance>
								<Java-Runtime>${java.runtime.name}-${java.runtime.version}</Java-Runtime>
							</manifestEntries>
						</manifestSection>
						<manifestSection>
							<name>Legal</name>
							<manifestEntries>
								<Copyright>${project.copyright}</Copyright>
							</manifestEntries>
						</manifestSection>
					</archive>
				</configuration>
			</plugin>

			<!-- Since the Release Plugin performs a number of operations that change 
				the project, it may be wise to do a dry run before a big release or on a 
				new project. To do this, commit all of your files as if you were about to 
				run a full release and run:mvn release:prepare -DdryRun=true. This will ask 
				all the same questions, run the same tests, and output a copy of how the 
				POMs will look after transformation. You can check the output and review 
				the POMs, then run: mvn release:clean. This will remove all of the files 
				created above, and the project will be ready to execute the proper release. -->

			<!-- mvn release:prepare does the following: 1. Checks that your local 
				source code does not have any modifications 2. Writes a release.properties 
				file with details of what it is doing 3. Modifies the pom.xml to the release 
				versions 4. Does a build as far as "package" in order to assure itself that 
				it's changes have not broken the build 5. Commits the modified pom.xml files 
				to SCM 6. Tags the trunk 7. Modifies the pom.xml to the next snapshot version 
				8. Commits the modified pom.xml files to SCM THEN mvn release:perform does 
				the following 1. Checks out the tagged release into target/checkout 2. Forks 
				a "mvn deploy site-deploy" 3. Removes the release.properties file -->
			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${release-plugin-version}</version>
				<configuration>
					<autoVersionSubmodules>false</autoVersionSubmodules> < user will be prompted for sub-module versions >
				</configuration>
			</plugin>  -->

          <!-- produce dependency graphics (.png by default) of the dependency heirarchy -->
          <!-- 
          <plugin>
            <groupId>ch.elca.el4j.maven.plugins</groupId>
            <artifactId>maven-depgraph-plugin</artifactId>
            <version>${el4jgraph-plugin-version}</version>
            <configuration>
                <outDir>target/depgraph</outDir>
            </configuration>
          </plugin>  
          -->         
          
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-checkstyle-plugin</artifactId>
            <version>2.10</version>
            <configuration>
              <configLocation>${file.separator}.settings${file.separator}custom_checkstyle_config</configLocation>
              <outputDirectory>${reports.checkstyle.outputdir}</outputDirectory>
              <outputFile>${reports.checkstyle.outputdir}${file.separator}checkstyle-result.xml</outputFile>
            </configuration>
          </plugin>
                

  		</plugins>
	</build>

	<!-- configure reporting plugins and configurations -->
	<reporting>
		<plugins>

			<plugin>
				<!-- javadoc generation -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${javadoc-plugin-version}</version>
				<configuration>
					<outputDirectory>${reports.javadocs.outputdir}</outputDirectory>
					<!--<jarOutputDirectory>${reports.javadocs.outputdir}</jarOutputDirectory> -->
				</configuration>
			</plugin>

			<plugin>
				<!-- jxr -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>${jxr-plugin-version}</version>
				<configuration>

					<bottom>${project.copyright}</bottom>
					<!--<javadocDir>${reports.javadocs.outputdir}</javadocDir> -->
				</configuration>
			</plugin>

			<plugin>
				<!-- PMD reports -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-pmd-plugin</artifactId>
				<version>${pmd-plugin-version}</version>
				<configuration>
					<targetJdk>${java.compile.compliance.level}</targetJdk>
					<linkXRef>true</linkXRef>
					<!-- <outputDirectory>${reports.pmd.outputdir}</outputDirectory> -->

				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${project-info-reports-plugin-version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>cim</report>
							<!--// these bundled dependency reports have a known bug that causes 
								failures. exclude them from reporting suite. We will run separate dependency 
								reports with other plugins <report>dependencies</report> <report>dependency-convergence</report> -->
							<report>dependency-management</report>
							<report>distribution-management</report>
							<report>help</report>
							<report>index</report>
							<report>issue-tracking</report>
							<report>license</report>
							<report>mailing-list</report>
							<report>modules</report>
							<report>plugin-management</report>
							<report>plugins</report>
							<report>project-team</report>
							<report>scm</report>
							<report>summary</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
			
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions-plugin-version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>

			<plugin>
			   <groupId>org.codehaus.mojo</groupId>
			   <artifactId>findbugs-maven-plugin</artifactId>
			   <version>${findbugs-plugin-version}</version>
			   <configuration>
			      <findbugsXmlOutput>true</findbugsXmlOutput>
			      <findbugsXmlWithMessages>true</findbugsXmlWithMessages>
			      <xmlOutput>true</xmlOutput>
			   </configuration>
			</plugin>

		</plugins>
	</reporting>
</project>
